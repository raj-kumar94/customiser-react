{"version":3,"sources":["components/LoadImageFromURL.jsx","contexts/Configurator.js","components/ImageConfigurator.jsx","components/slider/SlickSliderArrows.jsx","components/slider/ProductSlider.jsx","components/options/SwatchOptions.jsx","components/options/ConfLayers.jsx","components/options/ConfiguratorOptions.jsx","components/grid/GridsConfigurator.jsx","serviceWorker.js","index.js"],"names":["LoadImageFromURL","props","useImage","src","image","x","y","image_width","containerOffsetWidth","image_height","containerOffsetHeight","max","Math","img_width","width","img_height","height","ratio","ConfiguratorContext","createContext","ConfiguratorContextProvider","initDefaultColorConfiguration","productData","console","log","configuration","product","configObject","currentLayerColors","layer","layer_obj","title","layerTitle","properties","property","propertyName","property_obj","views","view","viewName","view_obj","image_src","Object","keys","sliderImages","generateViewImagesArr","viewsTemp","viewImage","push","handleCurrentLayerColorChange","layer_title","property_title","a","state","setState","Provider","value","this","children","Component","ImageConfigurator","getContainerDimenstions","document","querySelector","offsetWidth","offsetHeight","containerWidth","conatainerHeight","updateDimensions","getCanvasHtml","viewKey","layerKey","map","images","index","key","id","slides","context","window","addEventListener","downloaded","img_","Image","picture","url","removeEventListener","settings","contextType","SlickPrevArrow","className","style","onClick","SlickNextArrow","ProductSlider","sliderSettings","dots","infinite","speed","slidesToShow","slidesToScroll","adaptiveHeight","nextArrow","prevArrow","SwatchOptionProperties","tabIndex","data-option-index","_id","type","name","aria-label","data-property_title","data-layer_title","data-id","data-layer-id","data-property-id","selectedSwatch","handleSwatchClick","data-image","icon","htmlFor","background","backgroundPosition","out_of_stock","alt","SwatchOptions","display","event","currentTarget","dataset","toggleAccordion","data-layer","visibility","ConfLayers","configurations","ConfiguratorOptions","GridsConfigurator","Boolean","location","hostname","match","CUSTOMISER_SLIDER_SECTION","getElementById","CUSTOMISER_OPTIONS_SECTION","CUSTOMISER_GRIDS_SECTION","ProductSliderPortal","ReactDOM","createPortal","ConfiguratorOptionsPortal","GridsConfiguratorPortal","Container","Configurator","React","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed335afd.chunk.js","sourcesContent":["import React from 'react';\nimport { Image as KonvaImage } from 'react-konva';\nimport useImage from 'use-image';\n\n// the first very simple and recommended way:\nconst LoadImageFromURL = (props) => {\n    const [image] = useImage(props.src);\n\n    let x = 20;\n    let y = 30;\n    let image_width = props.containerOffsetWidth;\n    let image_height = props.containerOffsetHeight - 100;\n\n    /**\n     * Conditional rendering doesn't work in KonvaImage\n     * so use if statement to update values\n     */\n    if(image) {\n        // var max = props.containerOffsetWidth;\n        var max = Math.max(props.containerOffsetWidth, props.containerOffsetHeight);\n        var img_width = image.width;\n        var img_height = image.height;\n        var ratio = (img_width > img_height ? (img_width / max) : (img_height / max));\n        image_width = img_width / ratio;\n        image_height = img_height / ratio;\n\n        x = (props.containerOffsetWidth - image_width) / 2;\n        y = (props.containerOffsetHeight - image_height) / 2;\n        // console.log({x, y, image_width, image_height, max, image: 'yes', w: props.containerOffsetWidth, h: props.containerOffsetHeight});\n    }\n    return <KonvaImage image={image} width={image_width} height={image_height} x={x} y={y} />;\n};\n\n\nexport default LoadImageFromURL;","import React, { createContext, Component } from 'react';\n// import productData from \"../utils/productDummyData.json\";\nimport productData from \"../utils/productDummyData2.json\";\n\nexport const ConfiguratorContext = createContext();\n\nclass ConfiguratorContextProvider extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let { configObject, sliderImages, currentLayerColors } = this.initDefaultColorConfiguration(productData);\n        this.state = {\n            title: \"Test\",\n            productData: productData,\n            configObject,\n            sliderImages,\n            currentLayerColors\n        }\n    }\n\n    initDefaultColorConfiguration = (productData) => {\n        console.log(\"initDefaultColorConfiguration:start\")\n        let configuration = productData.product.configuration;\n        let configObject = {};\n        let currentLayerColors = {}; // default color of each layer\n        let defaultColor = \"Blau\";\n        \n        for(let layer of configuration.layer) {\n            configObject[layer.layer_obj.title] = {}\n            currentLayerColors[layer.layer_obj.title] = defaultColor;\n        }\n\n\n        for(let layer of configuration.layer) {\n            let layerTitle = layer.layer_obj.title;\n            for(let property of layer.properties) {\n                let propertyName = property.property_obj.title;\n\n                if(!configObject[layerTitle][propertyName]) {\n                    configObject[layerTitle][propertyName] = {}\n                }\n\n                for(let view of property.views) {\n                    let viewName = view.view_obj.title;\n                    configObject[layerTitle][propertyName][viewName] = view.image_src\n                }   \n            }\n        }\n\n        for(let layerTitle in configObject) {\n            if(defaultColor in configObject[layerTitle]) {\n                //\n            } else {\n                // first color of layer in configObject\n                currentLayerColors[layerTitle] = Object.keys(configObject[layerTitle])[0];\n            }\n        }\n\n        /**\n         * Generate view images\n         */\n        const { sliderImages } = this.generateViewImagesArr(productData, configObject, currentLayerColors);\n\n        return { configObject, sliderImages, currentLayerColors };\n    }\n\n\n    /**\n     * Generate view images for selected color in each layer (2D array of images)\n     * [ [view1 images], [view2 images], [view3 images], ....]\n     */\n    generateViewImagesArr = (productData, configObject, currentLayerColors) => {\n        let viewsTemp = {};\n        let sliderImages = [];\n        for(let view of productData.view) {\n            for(let layerTitle in configObject) {\n                // currentLayerColors[layerTitle] = color of the layer\n                let viewImage = configObject[layerTitle][currentLayerColors[layerTitle]][view.view_obj.title];\n                if(!viewImage) {\n                    continue;\n                }\n                if(viewsTemp[view.view_obj.title]) {\n                   viewsTemp[view.view_obj.title].push(viewImage); \n                } else {\n                    viewsTemp[view.view_obj.title] = [viewImage]; \n                }\n            }\n        }\n\n        for(let view of productData.view) {\n            if(view.view_obj.title in viewsTemp) {\n                sliderImages.push(viewsTemp[view.view_obj.title]);\n            }\n        }\n\n        return { sliderImages };\n    }\n\n\n    /**\n     * On click of swatch, update the canvas/images\n     */\n    handleCurrentLayerColorChange = async (layer_title, property_title) => {\n        let { currentLayerColors } = this.state;\n        if(currentLayerColors[layer_title] != property_title) {\n            console.log(\"Different\");\n            currentLayerColors[layer_title] = property_title;\n\n            const { sliderImages } = this.generateViewImagesArr(this.state.productData, this.state.configObject, this.state.currentLayerColors);\n            await this.setState({\n                sliderImages:sliderImages, \n                currentLayerColors: currentLayerColors\n            });\n            console.log(\"values updated\");\n        } else {\n            console.log(\"Same color\");\n        }\n    }\n\n\n    render() {\n        return (\n            <ConfiguratorContext.Provider value={{\n                ...this.state,\n                handleCurrentLayerColorChange: this.handleCurrentLayerColorChange\n            }}>\n                {this.props.children}\n            </ConfiguratorContext.Provider>\n        )\n    }\n}\n\nexport default ConfiguratorContextProvider;\n","import React, { Component } from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport Slider from \"react-slick\";\n\nimport LoadImageFromURL from \"../components/LoadImageFromURL\"\nimport { ConfiguratorContext } from '../contexts/Configurator';\n\n\nclass ImageConfigurator extends Component {\n\n    ratio = 1.5;\n\n    static contextType = ConfiguratorContext;\n\n    constructor(props) {\n        super(props);\n        const { containerOffsetHeight, containerOffsetWidth, containerWidth, conatainerHeight } = this.getContainerDimenstions();\n        \n        this.state = {\n            containerOffsetHeight,\n            containerOffsetWidth,\n            containerWidth, \n            conatainerHeight,\n            slides: [],\n            configObject: {}\n        }\n    }\n\n    getContainerDimenstions = () => {\n        let containerOffsetWidth = document.querySelector('.custom_container_creator_nine').offsetWidth-0;\n        let containerOffsetHeight = document.querySelector('.custom_container_creator_nine').offsetHeight-0;\n        let containerWidth = containerOffsetWidth;\n        let conatainerHeight = containerOffsetHeight;\n\n        // let currentRatio = containerOffsetWidth/containerOffsetHeight;\n\n        // if(currentRatio > this.ratio) {\n        //     containerOffsetWidth = this.ratio * containerOffsetHeight;\n        // } else if(currentRatio < (this.ratio - 0.1)) {\n        //     containerOffsetWidth = Math.min(containerOffsetWidth,containerOffsetHeight);\n        //     containerOffsetHeight = containerOffsetWidth / this.ratio;\n        // }\n        return { containerOffsetHeight, containerOffsetWidth, containerWidth, conatainerHeight };\n    }\n\n    updateDimensions = () => {\n        const { containerOffsetHeight, containerOffsetWidth } = this.getContainerDimenstions();\n        this.setState({ containerOffsetWidth, containerOffsetHeight });\n    };\n\n    componentDidMount() {\n        this.setState({sliderImages: this.context.sliderImages, configObject: this.context.configObject});\n\n        window.addEventListener('resize', this.updateDimensions);\n        console.log(\"componentDidMount called\");\n\n        // forcing browser to load all images\n        let downloaded = {};\n        for(let image of this.context.sliderImages) {\n            for(let img_ of image) {\n                const img = new Image();\n                img.src = img_;\n                downloaded[img_] = 1;\n            }\n        }\n\n        let images = this.context.productData && this.context.productData.images ? this.context.productData.images: [];\n        for(let picture of images) {\n            if(downloaded[picture.url]) {\n                continue;\n            }\n            const img = new Image();\n            img.src = picture.url;\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    // componentWillMount() {\n    //     this.setState({sliderImages: this.context.sliderImages, configObject: this.context.configObject});\n    // }\n\n    getCanvasHtml = (sliderImages, viewKey=\"views-\", layerKey= \"layer-\") => {\n        const { containerOffsetWidth, containerOffsetHeight, containerWidth, conatainerHeight } = this.state;\n\n        /**\n         * create n number of divs per views (top/side/inner etc). They all will go inside the slider\n         */\n        return sliderImages.map( (images, index) => {\n            return <div key={`${viewKey}${index}`} id={`${viewKey}${index}`}>\n                    <Stage width={containerWidth} height={conatainerHeight}>\n                        {\n                            images.map((src, index) => {\n                                return (\n                                    <Layer key={`${layerKey}${index}`}>\n                                        <LoadImageFromURL src={src} containerOffsetWidth={containerOffsetWidth} containerOffsetHeight={containerOffsetHeight} />\n                                    </Layer>\n                                )\n                            })\n                        }\n                    </Stage>\n                </div>\n        });\n    }\n\n    render() {\n        // console.log('rendering...');\n\n        const { sliderImages } = this.context;\n        var settings = this.props.settings;\n\n        return (\n            settings \n            ? \n            <Slider {...settings}>\n                {this.getCanvasHtml(sliderImages)}\n            </Slider>\n            : \n            <>{this.getCanvasHtml(sliderImages, 'viewGrid_thumb_', 'viewGrid_thumb_')}</>\n        );\n    }\n}\n\nexport default ImageConfigurator;\n","import React from 'react';\n\nexport const SlickPrevArrow = (props) => {\n    const { className, style, onClick } = props;\n    return (\n        <div\n            className={className}\n            style={{ ...style }}\n            onClick={onClick}\n        />\n    );\n}\n\nexport const SlickNextArrow = (props) => {\n    const { className, style, onClick } = props;\n    return (\n        <div\n            className={className}\n            style={{ ...style }}\n            onClick={onClick}\n        />\n    );\n}\n\n\n","import React, { Component } from 'react'\n// import Slider from \"react-slick\";\nimport ImageConfigurator from \"../ImageConfigurator\";\nimport { SlickNextArrow, SlickPrevArrow } from './SlickSliderArrows';\n\nclass ProductSlider extends Component {\n\n    state = {\n        sliderSettings: {\n            dots: true,\n            infinite: true,\n            speed: 500,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            adaptiveHeight: true,\n            // arrows: true,\n            nextArrow: <SlickNextArrow />,\n            prevArrow: <SlickPrevArrow />\n        }\n    }\n\n    render() {\n        const settings = this.state.sliderSettings;\n        return (\n            // using content of ImageConfigurator in here is not working\n            // so, I'm using Slider inside ImageConfigurator component conditionally\n            // <Slider {...settings}>\n            <ImageConfigurator settings={settings} />\n            // </Slider>\n        )\n    }\n}\n\nexport default ProductSlider;\n","import React, { Component } from 'react'\nimport { ConfiguratorContext } from '../../contexts/Configurator';\n\n\nfunction SwatchOptionProperties(props) {\n    const tabIndex = props.tabIndex || 0;\n    const property = props.property;\n    const property_title = property.property_obj.title;\n\n    return (\n        <div className=\"swatch clearfix\" data-option-index={tabIndex}>\n            <input id={property._id} type=\"radio\" name={`option-${tabIndex}`} aria-label={property_title} tabIndex={tabIndex} value={property_title} />\n            <div tabIndex={tabIndex} data-property_title={property_title} data-layer_title={props.layer_title} data-id={property._id}\n                data-layer-id={property._id} data-property-id={property._id}\n                className={`swatch-element color ${ props.selectedSwatch === property_title ? \"selected\": \"\" }`} onClick={props.handleSwatchClick}>\n                <label data-image={property.property_obj.icon}\n                    htmlFor={property._id}\n                    style={{ background: `url(${property.property_obj.icon})`, backgroundPosition: \"center\" }}>\n                    <img className={property.out_of_stock ? \"\": \"crossed-out\"}\n                        src=\"https://cdn.shopify.com/s/files/1/0306/8693/7223/t/62/assets/soldout.png?v=1203348852561544404\"\n                        aria-label=\"sold out\" alt=\"sold out\"/>\n                </label>\n            </div>\n            <input type=\"radio\" name={`option-${tabIndex}`} aria-label={property_title} tabIndex={tabIndex} value={property_title} />\n        </div>\n    )\n}\n\n\nexport class SwatchOptions extends Component {\n\n    static contextType = ConfiguratorContext;\n\n    state = {\n        display: 'none',\n        selectedSwatch: 'Blau'\n    }\n\n    handleSwatchClick = (event) => {\n        const layer_title = event.currentTarget.dataset.layer_title;\n        const property_title = event.currentTarget.dataset.property_title;\n        this.context.handleCurrentLayerColorChange(layer_title, property_title);\n    }\n\n    toggleAccordion = () => {\n        const display = this.state.display;\n        this.setState({display: display === 'none' ? 'block': 'none'});\n    }\n\n\n    render() {\n\n        const tabIndex = this.props.tabIndex || 0;\n        const layer = this.props.layer;\n        const display = this.state.display;\n\n\n        return (\n            // <div className=\"prod-custom-accordion-wrapper\">\n                <div className=\"main-accordion\" data-layer={layer.layer_obj.title} onClick={this.toggleAccordion}>\n                    <h1 className=\"prod-accordion-title\">{layer.layer_obj.title}\n                        {\n                        display === 'block' ? <span className=\"level-one-icon icon-minus\"></span>\n                        : <span className=\"level-one-icon icon-plus\" style={{ display: 'inline-block' }}></span> \n                        }\n                        {/* <span className=\"level-one-icon icon-plus\"></span>\n                        <span className=\"level-one-icon icon-minus\"></span> */}\n                        <span className=\"subtitle-block\" style={{ visibility: 'visible' }}>Farbe: {this.props.selectedSwatch}</span>\n                    </h1>\n                    <div className=\"prod-accordion-content\" name={`dropdown_custom_${layer.layer_obj._id}`}\n                        id={`dropdown_custom_${layer.layer_obj._id}`} data-layer-id={layer.layer_obj._id}\n                        style={{ display: display }}>\n                        <div className=\"swatch_options\">\n\n                            {/* repetitive block */}\n                            {\n                                layer.properties.map( (property, index) => {\n                                    return <SwatchOptionProperties key={`SwatchOptionProperties-${index}`} tabIndex={tabIndex} layer_title={layer.layer_obj.title} property={property} handleSwatchClick={this.handleSwatchClick} selectedSwatch={this.props.selectedSwatch} />\n                                })\n                            }\n\n                            {/* end repetitive block */}\n\n                        </div>\n                        <span className=\"subtitle-block\">Farbe: {this.props.selectedSwatch}</span>\n                    </div>\n                </div>\n            // </div>\n        )\n    }\n}\n\nexport default SwatchOptions\n","import React, { Component } from 'react';\nimport { ConfiguratorContext } from \"../../contexts/Configurator\";\nimport SwatchOptions from \"./SwatchOptions\";\n\nclass ConfLayers extends Component {\n\n    static contextType = ConfiguratorContext;\n\n    render() {\n\n        const configurations = this.context && this.context.productData ? this.context.productData.product.configuration: {};\n        const currentLayerColors = this.context.currentLayerColors;\n        \n        return (\n            <div className=\"prod-custom-accordion-wrapper\">\n                {\n                configurations.layer.map( (layer, index) => {\n                    return <SwatchOptions key={`layer-${index}`} tabIndex={index} layer={layer} selectedSwatch={currentLayerColors[layer.layer_obj.title]} />\n                })\n                }\n            </div>\n        )\n    }\n}\n\nexport default ConfLayers;","import React, { Component } from 'react';\n// import ConfiguratorContextProvider from '../contexts/Configurator';\nimport ConfLayers from \"./ConfLayers\";\n\nclass ConfiguratorOptions extends Component {\n    render() {\n        return (\n            <>\n                <ConfLayers />\n            </>\n        )\n    }\n}\n\nexport default ConfiguratorOptions\n","import React, { Component } from 'react'\nimport ImageConfigurator from '../ImageConfigurator'\n\nclass GridsConfigurator extends Component {\n    render() {\n        return (\n            <ImageConfigurator />\n        )\n    }\n}\n\nexport default GridsConfigurator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport ProductSlider from './components/slider/ProductSlider';\nimport ConfiguratorOptions from './components/options/ConfiguratorOptions';\nimport GridsConfigurator from './components/grid/GridsConfigurator';\nimport * as serviceWorker from './serviceWorker';\nimport ConfiguratorContextProvider from './contexts/Configurator';\n\nconst CUSTOMISER_SLIDER_SECTION = document.getElementById('customiser-slider-section');\nconst CUSTOMISER_OPTIONS_SECTION = document.getElementById('customiser-options-section');\nconst CUSTOMISER_GRIDS_SECTION = document.getElementById('viewGrid');\n\n\nconst ProductSliderPortal = () => ReactDOM.createPortal(<ProductSlider />, CUSTOMISER_SLIDER_SECTION);\nconst ConfiguratorOptionsPortal = () => ReactDOM.createPortal(<ConfiguratorOptions />, CUSTOMISER_OPTIONS_SECTION);\nconst GridsConfiguratorPortal = () => ReactDOM.createPortal(<GridsConfigurator />, CUSTOMISER_GRIDS_SECTION);\nclass Container extends React.Component {\n  render() {\n    return <>\n    <ConfiguratorContextProvider>\n      <ProductSliderPortal />\n      <ConfiguratorOptionsPortal />\n      <GridsConfiguratorPortal />\n    </ConfiguratorContextProvider>\n    </>\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container />\n  </React.StrictMode>,\n  document.getElementById('customiser-options-section')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}